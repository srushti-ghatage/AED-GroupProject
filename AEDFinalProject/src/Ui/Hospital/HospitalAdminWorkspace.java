/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Ui.Hospital;

import Funding.FundManager.FundManager;
import Hospital.Doctor.Doctor;
import Hospital.Encounter.Appointment;
import Hospital.Encounter.Encounter;

import Hospital.Patient.Patient;
import Ngo.Budget.Budget;
import Ngo.CareTaker.Caretaker;
import Ngo.NgoManager.NgoManager;
import System.Directories.DB4OUtil;
import System.Directories.DataValidation;
import System.Directories.MainSystem;
import java.awt.CardLayout;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author SrushtiGhatage
 */
public class HospitalAdminWorkspace extends javax.swing.JPanel {

    /**
     * Creates new form HospitalJPanel
     */
    private JPanel cardPanel;
    private NgoManager ngoManager;
    private MainSystem system;
    private DB4OUtil dB4OUtil;
    private final String FILENAME = "ProjectDataBank.db4o";
    private DataValidation data;
    
    
    public HospitalAdminWorkspace(JPanel cardPanel,MainSystem system,DB4OUtil dB4OUtil) {
        initComponents();
        this.cardPanel = cardPanel;
        this.system = system;
        this.dB4OUtil = dB4OUtil;
        this.data=new DataValidation();
        
        populateDoctorTable();
        populatePatientTable();
        populateHospitalEncounterTable();
        populateAppointmentTable();
        populateCombo();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField37 = new javax.swing.JTextField();
        SplitPaneDoctor = new javax.swing.JSplitPane();
        panelControl = new javax.swing.JPanel();
        btnHome = new javax.swing.JButton();
        btnDoctor = new javax.swing.JButton();
        btnPatient = new javax.swing.JButton();
        btnEncounter = new javax.swing.JButton();
        Appointments = new javax.swing.JButton();
        panelWork = new javax.swing.JPanel();
        panelHome = new javax.swing.JPanel();
        lblRole = new javax.swing.JLabel();
        btnLogOut = new javax.swing.JButton();
        lblTitleHospital = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        panelDoctor = new javax.swing.JPanel();
        lblTitleDoctor = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableDoctor = new javax.swing.JTable();
        btnCreate = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        txtDoctorRole = new javax.swing.JTextField();
        lblDoctorRole = new javax.swing.JLabel();
        lblDoctorID = new javax.swing.JLabel();
        txtDoctorID = new javax.swing.JTextField();
        lblDoctorUsername = new javax.swing.JLabel();
        txtDoctorUsername = new javax.swing.JTextField();
        lblDoctorName = new javax.swing.JLabel();
        txtDoctorName = new javax.swing.JTextField();
        lblDoctorAge = new javax.swing.JLabel();
        txtDoctorAge = new javax.swing.JTextField();
        lblDoctorGender = new javax.swing.JLabel();
        lblDoctorEmail = new javax.swing.JLabel();
        txtDoctorEmail = new javax.swing.JTextField();
        lblDoctorPhone = new javax.swing.JLabel();
        lblDoctorHospital = new javax.swing.JLabel();
        txtDoctorHospital = new javax.swing.JTextField();
        lblDoctorSpecialization = new javax.swing.JLabel();
        txtDoctorSpecialization = new javax.swing.JTextField();
        lblDoctorExperience = new javax.swing.JLabel();
        txtDoctorExperience = new javax.swing.JTextField();
        lblDoctorPassword = new javax.swing.JLabel();
        cbDoctorGender = new javax.swing.JComboBox<>();
        txtDoctorPhno = new javax.swing.JTextField();
        txtDoctorPassword = new javax.swing.JPasswordField();
        panelPatient = new javax.swing.JPanel();
        lblTitlePatient = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablePatient = new javax.swing.JTable();
        btnPatientCreate = new javax.swing.JButton();
        btnPatientView = new javax.swing.JButton();
        btnPatientUpdate = new javax.swing.JButton();
        btnPatientDelete = new javax.swing.JButton();
        lblPatientRole = new javax.swing.JLabel();
        txtPatientRole = new javax.swing.JTextField();
        lblPatientID = new javax.swing.JLabel();
        txtPatientID = new javax.swing.JTextField();
        lblPatientUsername = new javax.swing.JLabel();
        txtPatientUsername = new javax.swing.JTextField();
        lblPatientName = new javax.swing.JLabel();
        txtPatientName = new javax.swing.JTextField();
        lblPatientAge = new javax.swing.JLabel();
        txtPatientAge = new javax.swing.JTextField();
        lblPatientGender = new javax.swing.JLabel();
        cbPatientGender = new javax.swing.JComboBox<>();
        lblPatientEmail = new javax.swing.JLabel();
        txtPatientEmail = new javax.swing.JTextField();
        lblPatientPhone = new javax.swing.JLabel();
        txtPatientPhone = new javax.swing.JTextField();
        lblPatientPassword = new javax.swing.JLabel();
        lblPatientUsername1 = new javax.swing.JLabel();
        cmdDoc = new javax.swing.JComboBox<>();
        txtPatientPassword = new javax.swing.JPasswordField();
        panelEncounter = new javax.swing.JPanel();
        lblTitleEncounter = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableEncounter = new javax.swing.JTable();
        btnEncounterCreate = new javax.swing.JButton();
        btnEncounterView = new javax.swing.JButton();
        btnEncounterUpdate = new javax.swing.JButton();
        btnEncounterDelete = new javax.swing.JButton();
        lblEncounterNo = new javax.swing.JLabel();
        lblEncounterHospital = new javax.swing.JLabel();
        lblDoctorEncounterUsername = new javax.swing.JLabel();
        lblEncounterPatientUsername = new javax.swing.JLabel();
        lblEncounterDate = new javax.swing.JLabel();
        txtEncounterNo = new javax.swing.JTextField();
        txtEncounterHospital = new javax.swing.JTextField();
        txtEncounterDate = new javax.swing.JTextField();
        lblEncounterBP = new javax.swing.JLabel();
        txtEncounterBP = new javax.swing.JTextField();
        lblEncounterTemperature = new javax.swing.JLabel();
        txtEncounterTemperature = new javax.swing.JTextField();
        lblEncounterMedicine = new javax.swing.JLabel();
        txtEncounterMedicine = new javax.swing.JTextField();
        lblEncounterMedicineQuantity = new javax.swing.JLabel();
        txtMedicineQuantity = new javax.swing.JTextField();
        cmbDoc1 = new javax.swing.JComboBox<>();
        txtEncounterPatientUsername = new javax.swing.JComboBox<>();
        panelAppointment = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tableAppointment = new javax.swing.JTable();
        lblApplicationNo = new javax.swing.JLabel();
        txtApplicationNo = new javax.swing.JTextField();
        lblChildName = new javax.swing.JLabel();
        txtChildName = new javax.swing.JTextField();
        lblChildAge = new javax.swing.JLabel();
        txtChildAge = new javax.swing.JTextField();
        lblChildName3 = new javax.swing.JLabel();
        cmbChildGender = new javax.swing.JComboBox<>();
        lblStatus = new javax.swing.JLabel();
        txtStatus = new javax.swing.JTextField();
        lblChildName5 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        txtChildComment = new javax.swing.JTextArea();
        lblTitle7 = new javax.swing.JLabel();
        lblChildName1 = new javax.swing.JLabel();
        txtAppDate = new javax.swing.JTextField();
        btnAccept = new javax.swing.JButton();
        btnReject = new javax.swing.JButton();
        btnView1 = new javax.swing.JButton();

        jTextField37.setText("jTextField37");

        panelControl.setBackground(new java.awt.Color(51, 51, 51));

        btnHome.setText("Home");
        btnHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHomeActionPerformed(evt);
            }
        });

        btnDoctor.setText("Doctor");
        btnDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDoctorActionPerformed(evt);
            }
        });

        btnPatient.setText("Patient");
        btnPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPatientActionPerformed(evt);
            }
        });

        btnEncounter.setText("Encounter");
        btnEncounter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEncounterActionPerformed(evt);
            }
        });

        Appointments.setText("Appointments");
        Appointments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AppointmentsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelControlLayout = new javax.swing.GroupLayout(panelControl);
        panelControl.setLayout(panelControlLayout);
        panelControlLayout.setHorizontalGroup(
            panelControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelControlLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnHome, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnDoctor, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnPatient, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnEncounter, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Appointments, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );

        panelControlLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {Appointments, btnDoctor, btnEncounter, btnHome, btnPatient});

        panelControlLayout.setVerticalGroup(
            panelControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelControlLayout.createSequentialGroup()
                .addGap(91, 91, 91)
                .addComponent(btnHome)
                .addGap(18, 18, 18)
                .addComponent(btnDoctor)
                .addGap(18, 18, 18)
                .addComponent(btnPatient)
                .addGap(18, 18, 18)
                .addComponent(btnEncounter)
                .addGap(18, 18, 18)
                .addComponent(Appointments)
                .addContainerGap(502, Short.MAX_VALUE))
        );

        SplitPaneDoctor.setLeftComponent(panelControl);

        panelWork.setLayout(new java.awt.CardLayout());

        panelHome.setBackground(new java.awt.Color(255, 255, 255));
        panelHome.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblRole.setFont(new java.awt.Font("Rockwell", 1, 18)); // NOI18N
        lblRole.setText("Role:  Hospital Admin");
        panelHome.add(lblRole, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 110, 230, 27));

        btnLogOut.setText("Logout");
        btnLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogOutActionPerformed(evt);
            }
        });
        panelHome.add(btnLogOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 160, 123, -1));

        lblTitleHospital.setFont(new java.awt.Font("Rockwell", 1, 36)); // NOI18N
        lblTitleHospital.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitleHospital.setText("HOSPITAL ADMIN HOME");
        panelHome.add(lblTitleHospital, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 50, 891, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGES/hospitalmanagement.gif"))); // NOI18N
        panelHome.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 110, 880, 650));

        panelWork.add(panelHome, "card2");

        panelDoctor.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblTitleDoctor.setFont(new java.awt.Font("Rockwell", 1, 36)); // NOI18N
        lblTitleDoctor.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitleDoctor.setText("HOSPITAL ADMIN: DOCTOR");
        panelDoctor.add(lblTitleDoctor, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, 1165, 48));

        tableDoctor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Doctor ID", "Doctor Name", "Specilization", "Doctor Age", "Doctor Gender", "Doctor Phone"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Long.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableDoctor);

        panelDoctor.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 111, 539, 120));

        btnCreate.setText("Create");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });
        panelDoctor.add(btnCreate, new org.netbeans.lib.awtextra.AbsoluteConstraints(32, 89, -1, -1));

        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });
        panelDoctor.add(btnView, new org.netbeans.lib.awtextra.AbsoluteConstraints(32, 130, -1, -1));

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        panelDoctor.add(btnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(32, 171, -1, -1));

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        panelDoctor.add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(32, 226, -1, -1));

        txtDoctorRole.setEditable(false);
        txtDoctorRole.setText("Doctor");
        txtDoctorRole.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDoctorRoleActionPerformed(evt);
            }
        });
        panelDoctor.add(txtDoctorRole, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 290, 170, -1));

        lblDoctorRole.setText("Role");
        panelDoctor.add(lblDoctorRole, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 300, 616, -1));

        lblDoctorID.setText("Doctor ID");
        panelDoctor.add(lblDoctorID, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 326, -1, -1));

        txtDoctorID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDoctorIDActionPerformed(evt);
            }
        });
        panelDoctor.add(txtDoctorID, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 320, 170, -1));

        lblDoctorUsername.setText("Username");
        panelDoctor.add(lblDoctorUsername, new org.netbeans.lib.awtextra.AbsoluteConstraints(159, 348, -1, -1));

        txtDoctorUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDoctorUsernameActionPerformed(evt);
            }
        });
        panelDoctor.add(txtDoctorUsername, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 350, 170, -1));

        lblDoctorName.setText("Name");
        panelDoctor.add(lblDoctorName, new org.netbeans.lib.awtextra.AbsoluteConstraints(159, 382, -1, -1));

        txtDoctorName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDoctorNameActionPerformed(evt);
            }
        });
        panelDoctor.add(txtDoctorName, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 380, 170, -1));

        lblDoctorAge.setText("Age");
        panelDoctor.add(lblDoctorAge, new org.netbeans.lib.awtextra.AbsoluteConstraints(159, 416, -1, -1));
        panelDoctor.add(txtDoctorAge, new org.netbeans.lib.awtextra.AbsoluteConstraints(276, 413, 170, -1));

        lblDoctorGender.setText("Gender");
        panelDoctor.add(lblDoctorGender, new org.netbeans.lib.awtextra.AbsoluteConstraints(159, 456, -1, -1));

        lblDoctorEmail.setText("Email ID");
        panelDoctor.add(lblDoctorEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(159, 496, -1, -1));

        txtDoctorEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDoctorEmailActionPerformed(evt);
            }
        });
        panelDoctor.add(txtDoctorEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(276, 493, 170, -1));

        lblDoctorPhone.setText("Phone No");
        panelDoctor.add(lblDoctorPhone, new org.netbeans.lib.awtextra.AbsoluteConstraints(159, 536, -1, -1));

        lblDoctorHospital.setText("Hospital");
        panelDoctor.add(lblDoctorHospital, new org.netbeans.lib.awtextra.AbsoluteConstraints(159, 576, 57, -1));

        txtDoctorHospital.setEditable(false);
        txtDoctorHospital.setText("Hospital");
        panelDoctor.add(txtDoctorHospital, new org.netbeans.lib.awtextra.AbsoluteConstraints(272, 573, 180, -1));

        lblDoctorSpecialization.setText("Specialization");
        panelDoctor.add(lblDoctorSpecialization, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 610, -1, -1));
        panelDoctor.add(txtDoctorSpecialization, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 610, 180, -1));

        lblDoctorExperience.setText("Years of Experience");
        panelDoctor.add(lblDoctorExperience, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 650, -1, -1));
        panelDoctor.add(txtDoctorExperience, new org.netbeans.lib.awtextra.AbsoluteConstraints(272, 644, 180, -1));

        lblDoctorPassword.setText("Password");
        panelDoctor.add(lblDoctorPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 290, -1, -1));

        cbDoctorGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Male", "Female", "Others" }));
        panelDoctor.add(cbDoctorGender, new org.netbeans.lib.awtextra.AbsoluteConstraints(276, 453, 170, -1));
        panelDoctor.add(txtDoctorPhno, new org.netbeans.lib.awtextra.AbsoluteConstraints(276, 533, 170, -1));
        panelDoctor.add(txtDoctorPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 290, 126, -1));

        panelWork.add(panelDoctor, "card3");

        panelPatient.setBackground(new java.awt.Color(255, 255, 255));

        lblTitlePatient.setFont(new java.awt.Font("Rockwell", 0, 36)); // NOI18N
        lblTitlePatient.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitlePatient.setText("HOSPITAL ADMIN: PATIENT");

        tablePatient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Patient ID", "Patient Name", "Patient Age", "Patient Gender", "Patient Phone"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Long.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tablePatient);

        btnPatientCreate.setText("Create");
        btnPatientCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPatientCreateActionPerformed(evt);
            }
        });

        btnPatientView.setText("View");
        btnPatientView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPatientViewActionPerformed(evt);
            }
        });

        btnPatientUpdate.setText("Update");
        btnPatientUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPatientUpdateActionPerformed(evt);
            }
        });

        btnPatientDelete.setText("Delete");
        btnPatientDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPatientDeleteActionPerformed(evt);
            }
        });

        lblPatientRole.setText("Role");

        txtPatientRole.setEditable(false);
        txtPatientRole.setText("Patient");

        lblPatientID.setText("Patient ID");

        lblPatientUsername.setText("Username");

        lblPatientName.setText("Name");

        lblPatientAge.setText("Age");

        lblPatientGender.setText("Gender");

        cbPatientGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Male", "Female", "Others" }));

        lblPatientEmail.setText("Email");

        lblPatientPhone.setText("Phone No");

        lblPatientPassword.setText("Password");

        lblPatientUsername1.setText("Doctor Username:");

        javax.swing.GroupLayout panelPatientLayout = new javax.swing.GroupLayout(panelPatient);
        panelPatient.setLayout(panelPatientLayout);
        panelPatientLayout.setHorizontalGroup(
            panelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPatientLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelPatientLayout.createSequentialGroup()
                        .addComponent(lblTitlePatient, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(panelPatientLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(panelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelPatientLayout.createSequentialGroup()
                                .addGroup(panelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblPatientPassword)
                                    .addGroup(panelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblPatientRole)
                                        .addComponent(lblPatientID)
                                        .addComponent(lblPatientUsername)
                                        .addComponent(lblPatientName)
                                        .addComponent(lblPatientAge)
                                        .addComponent(lblPatientGender)
                                        .addComponent(lblPatientEmail)
                                        .addComponent(lblPatientPhone)))
                                .addGap(31, 31, 31)
                                .addGroup(panelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtPatientName)
                                    .addComponent(txtPatientAge)
                                    .addComponent(cbPatientGender, 0, 223, Short.MAX_VALUE)
                                    .addComponent(txtPatientEmail)
                                    .addComponent(txtPatientPhone)
                                    .addGroup(panelPatientLayout.createSequentialGroup()
                                        .addComponent(txtPatientRole, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(txtPatientID)
                                    .addComponent(txtPatientUsername)
                                    .addComponent(txtPatientPassword)))
                            .addGroup(panelPatientLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(lblPatientUsername1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmdDoc, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(881, 881, 881))
                    .addGroup(panelPatientLayout.createSequentialGroup()
                        .addGroup(panelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnPatientDelete)
                            .addGroup(panelPatientLayout.createSequentialGroup()
                                .addGroup(panelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnPatientCreate)
                                    .addComponent(btnPatientView)
                                    .addComponent(btnPatientUpdate))
                                .addGap(63, 63, 63)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        panelPatientLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnPatientCreate, btnPatientDelete, btnPatientUpdate, btnPatientView});

        panelPatientLayout.setVerticalGroup(
            panelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPatientLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitlePatient, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelPatientLayout.createSequentialGroup()
                        .addComponent(btnPatientCreate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnPatientView)
                        .addGap(18, 18, 18)
                        .addComponent(btnPatientUpdate)))
                .addGap(18, 18, 18)
                .addComponent(btnPatientDelete)
                .addGap(45, 45, 45)
                .addGroup(panelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPatientRole)
                    .addComponent(txtPatientRole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(panelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPatientID)
                    .addComponent(txtPatientID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(panelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPatientUsername)
                    .addComponent(txtPatientUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(panelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPatientName)
                    .addComponent(txtPatientName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelPatientLayout.createSequentialGroup()
                        .addComponent(lblPatientAge)
                        .addGap(29, 29, 29)
                        .addGroup(panelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPatientGender)
                            .addComponent(cbPatientGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(panelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPatientEmail)
                            .addComponent(txtPatientEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(panelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPatientPhone)
                            .addComponent(txtPatientPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(txtPatientAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPatientPassword)
                    .addComponent(txtPatientPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPatientUsername1)
                    .addComponent(cmdDoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(96, Short.MAX_VALUE))
        );

        panelPatientLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnPatientCreate, btnPatientDelete, btnPatientUpdate, btnPatientView});

        panelWork.add(panelPatient, "card4");

        lblTitleEncounter.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        lblTitleEncounter.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitleEncounter.setText("HOSPITAL ADMIN: ENCOUNTER");

        tableEncounter.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Encounter No", "Doctor UserName", "Patient Username", "BP", "Temperature"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tableEncounter);

        btnEncounterCreate.setText("Create");
        btnEncounterCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEncounterCreateActionPerformed(evt);
            }
        });

        btnEncounterView.setText("View");
        btnEncounterView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEncounterViewActionPerformed(evt);
            }
        });

        btnEncounterUpdate.setText("Update");
        btnEncounterUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEncounterUpdateActionPerformed(evt);
            }
        });

        btnEncounterDelete.setText("Delete");
        btnEncounterDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEncounterDeleteActionPerformed(evt);
            }
        });

        lblEncounterNo.setText("Encounter No");

        lblEncounterHospital.setText("Hospital");

        lblDoctorEncounterUsername.setText("Doctor Username");

        lblEncounterPatientUsername.setText("Patient Username");

        lblEncounterDate.setText("Date");

        txtEncounterHospital.setEditable(false);
        txtEncounterHospital.setText("Hospital");

        lblEncounterBP.setText("BP");

        lblEncounterTemperature.setText("Temperature");

        lblEncounterMedicine.setText("Medicine");

        lblEncounterMedicineQuantity.setText("Medicine Quantity");

        txtMedicineQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMedicineQuantityActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelEncounterLayout = new javax.swing.GroupLayout(panelEncounter);
        panelEncounter.setLayout(panelEncounterLayout);
        panelEncounterLayout.setHorizontalGroup(
            panelEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEncounterLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitleEncounter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(panelEncounterLayout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(panelEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelEncounterLayout.createSequentialGroup()
                        .addGroup(panelEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblEncounterHospital)
                            .addComponent(lblEncounterNo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblDoctorEncounterUsername, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblEncounterPatientUsername, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(panelEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtEncounterNo)
                            .addComponent(txtEncounterHospital)
                            .addComponent(cmbDoc1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtEncounterPatientUsername, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(panelEncounterLayout.createSequentialGroup()
                        .addComponent(lblEncounterDate)
                        .addGap(18, 18, 18)
                        .addComponent(txtEncounterDate, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)))
                .addGap(81, 81, 81)
                .addGroup(panelEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblEncounterBP)
                    .addComponent(lblEncounterTemperature)
                    .addComponent(lblEncounterMedicine)
                    .addComponent(lblEncounterMedicineQuantity))
                .addGap(39, 39, 39)
                .addGroup(panelEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtEncounterBP)
                    .addComponent(txtEncounterTemperature)
                    .addComponent(txtEncounterMedicine)
                    .addComponent(txtMedicineQuantity))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelEncounterLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelEncounterLayout.createSequentialGroup()
                        .addComponent(btnEncounterCreate)
                        .addGap(18, 18, 18)
                        .addComponent(btnEncounterView)
                        .addGap(18, 18, 18)
                        .addComponent(btnEncounterUpdate)
                        .addGap(18, 18, 18)
                        .addComponent(btnEncounterDelete))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 659, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(51, 51, 51))
        );

        panelEncounterLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnEncounterCreate, btnEncounterDelete, btnEncounterUpdate, btnEncounterView});

        panelEncounterLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lblDoctorEncounterUsername, lblEncounterBP, lblEncounterDate, lblEncounterHospital, lblEncounterMedicine, lblEncounterMedicineQuantity, lblEncounterNo, lblEncounterPatientUsername, lblEncounterTemperature});

        panelEncounterLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtEncounterBP, txtEncounterDate, txtEncounterHospital, txtEncounterMedicine, txtEncounterNo, txtEncounterTemperature, txtMedicineQuantity});

        panelEncounterLayout.setVerticalGroup(
            panelEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEncounterLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitleEncounter, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addGroup(panelEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEncounterCreate)
                    .addComponent(btnEncounterView)
                    .addComponent(btnEncounterUpdate)
                    .addComponent(btnEncounterDelete))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 152, Short.MAX_VALUE)
                .addGroup(panelEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelEncounterLayout.createSequentialGroup()
                        .addGroup(panelEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblEncounterNo)
                            .addComponent(txtEncounterNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(panelEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblEncounterHospital)
                            .addComponent(txtEncounterHospital, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(panelEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblDoctorEncounterUsername)
                            .addComponent(cmbDoc1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(panelEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblEncounterPatientUsername)
                            .addComponent(txtEncounterPatientUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34)
                        .addGroup(panelEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblEncounterDate)
                            .addComponent(txtEncounterDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panelEncounterLayout.createSequentialGroup()
                        .addGroup(panelEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblEncounterBP)
                            .addComponent(txtEncounterBP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(panelEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelEncounterLayout.createSequentialGroup()
                                .addGap(45, 45, 45)
                                .addGroup(panelEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblEncounterMedicine)
                                    .addComponent(txtEncounterMedicine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(34, 34, 34)
                                .addGroup(panelEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblEncounterMedicineQuantity)
                                    .addComponent(txtMedicineQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(panelEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblEncounterTemperature)
                                .addComponent(txtEncounterTemperature, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(139, 139, 139))
        );

        panelEncounterLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnEncounterCreate, btnEncounterDelete, btnEncounterUpdate, btnEncounterView});

        panelWork.add(panelEncounter, "card5");

        tableAppointment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Appointment Id", "Patient", "Gender", "Age", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tableAppointment);

        lblApplicationNo.setText("Appointment Id:");

        lblChildName.setText("Name:");

        lblChildAge.setText("Age:");

        lblChildName3.setText("Gender:");

        cmbChildGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Male", "Female", "Others" }));

        lblStatus.setText("Status:");

        txtStatus.setEditable(false);
        txtStatus.setText("Pending");

        lblChildName5.setText("Comment:");

        txtChildComment.setColumns(20);
        txtChildComment.setRows(5);
        jScrollPane5.setViewportView(txtChildComment);

        lblTitle7.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblTitle7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle7.setText("NGO Apointments");

        lblChildName1.setText("Date:");

        btnAccept.setText("Accept");
        btnAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcceptActionPerformed(evt);
            }
        });

        btnReject.setText("Reject");
        btnReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRejectActionPerformed(evt);
            }
        });

        btnView1.setText("View");
        btnView1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnView1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelAppointmentLayout = new javax.swing.GroupLayout(panelAppointment);
        panelAppointment.setLayout(panelAppointmentLayout);
        panelAppointmentLayout.setHorizontalGroup(
            panelAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTitle7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panelAppointmentLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(panelAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelAppointmentLayout.createSequentialGroup()
                        .addComponent(lblChildName1)
                        .addGap(66, 66, 66)
                        .addComponent(txtAppDate, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(panelAppointmentLayout.createSequentialGroup()
                            .addComponent(lblChildName3)
                            .addGap(59, 59, 59)
                            .addComponent(cmbChildGender, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(panelAppointmentLayout.createSequentialGroup()
                            .addComponent(lblChildAge)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtChildAge, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(panelAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelAppointmentLayout.createSequentialGroup()
                                .addComponent(lblChildName)
                                .addGap(66, 66, 66)
                                .addComponent(txtChildName, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelAppointmentLayout.createSequentialGroup()
                                .addComponent(lblApplicationNo)
                                .addGap(18, 18, 18)
                                .addComponent(txtApplicationNo, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAppointmentLayout.createSequentialGroup()
                        .addComponent(lblStatus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAppointmentLayout.createSequentialGroup()
                        .addComponent(lblChildName5)
                        .addGap(27, 27, 27)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAppointmentLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAccept)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnReject)
                .addGap(278, 278, 278))
            .addGroup(panelAppointmentLayout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(panelAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnView1)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 637, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(522, Short.MAX_VALUE))
        );
        panelAppointmentLayout.setVerticalGroup(
            panelAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAppointmentLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle7)
                .addGap(68, 68, 68)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(btnView1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblApplicationNo)
                    .addComponent(txtApplicationNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblStatus))
                .addGroup(panelAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAppointmentLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(panelAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblChildName)
                            .addComponent(txtChildName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(panelAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblChildAge)
                            .addComponent(txtChildAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(panelAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblChildName3)
                            .addComponent(cmbChildGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panelAppointmentLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(panelAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblChildName5)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(panelAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblChildName1)
                    .addComponent(txtAppDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(92, 92, 92)
                .addGroup(panelAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnReject)
                    .addComponent(btnAccept))
                .addContainerGap(202, Short.MAX_VALUE))
        );

        panelWork.add(panelAppointment, "card6");

        SplitPaneDoctor.setRightComponent(panelWork);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(SplitPaneDoctor)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(SplitPaneDoctor)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnEncounterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEncounterActionPerformed
        // TODO add your handling code here:
        panelWork.removeAll();
        panelWork.add(panelEncounter);
        panelWork.repaint();
        panelWork.revalidate();
    }//GEN-LAST:event_btnEncounterActionPerformed

    private void btnHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHomeActionPerformed
        // TODO add your handling code here:
        panelWork.removeAll();
        panelWork.add(panelHome);
        panelWork.repaint();
        panelWork.revalidate();
    }//GEN-LAST:event_btnHomeActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        // TODO add your handling code here:
        
        
        String role = txtDoctorRole.getText();
        
        String id = txtDoctorID.getText();
        if(id.isEmpty()){
            JOptionPane.showMessageDialog(this, "Enter the Id");
            return;
        }
        else if(system.getDoctorList().uiqueDoctorId(id)== false){
            JOptionPane.showMessageDialog(this, "Id already exist");
            return;
        }
        
        
        String username = txtDoctorUsername.getText();
        if(username.isEmpty()){
            JOptionPane.showMessageDialog(this, "Enter the username");
            return;
        }
        else if(system.getDoctorList().uniqueDoctorUsername(username)==false){
            JOptionPane.showMessageDialog(this, "Username already exist");
            return;
        }
        
        
        
        String name = txtDoctorName.getText();
        if(name.isEmpty()){
            JOptionPane.showMessageDialog(this, "Enter the name");
            return;
        }
        
        
        if(data.numcheck(txtDoctorAge.getText())==false){
            JOptionPane.showMessageDialog(this, "Enter valid age");
            return;
        }
        Integer age = Integer.valueOf(txtDoctorAge.getText());
        
        
        String gender = String.valueOf(cbDoctorGender.getSelectedItem());
        
        
        
        String emailid= txtDoctorEmail.getText();
        if(!data.emailCheck(emailid)){
            JOptionPane.showMessageDialog(this, "Enter valid email id");
            return;
        }
        
        
        if(!data.phnocheck(txtDoctorPhno.getText())){
            JOptionPane.showMessageDialog(this, "Enter valid phone no");
            return;
        }
        Long phno = Long.valueOf(txtDoctorPhno.getText());
        
        
        String hospital = txtDoctorHospital.getText();
        if(hospital.isEmpty()){
            JOptionPane.showMessageDialog(this, "Enter valid hospital");
            return;
        }
        
        
        String specialization = txtDoctorSpecialization.getText();
        if(specialization.isEmpty()){
            JOptionPane.showMessageDialog(this, "Enter valid specialization");
            return;
        }
        
        
        if(data.numcheck(txtDoctorExperience.getText())==false){
            JOptionPane.showMessageDialog(this, "Enter valid Experience");
            return;
        }
        Integer experience = Integer.valueOf(txtDoctorExperience.getText());
        
        
        
        String pass = txtDoctorPassword.getText();
        if(pass.isEmpty()){
            JOptionPane.showMessageDialog(this, "Enter valid password");
            return;
        }
        

        
        
        
        Doctor newDoctor = system.getDoctorList().addDoctor();
        
        newDoctor.setDoctorId(id);
        newDoctor.setName(name);
        newDoctor.setUsername(username);
        newDoctor.setAge(age);
        newDoctor.setGender(gender);
        newDoctor.setRole(role);
        newDoctor.setEmailId(emailid);
        newDoctor.setPhno(phno);
        newDoctor.setPassword(pass);
        newDoctor.setExperience(experience);
        newDoctor.setSpecialization(specialization);
        newDoctor.setHospital(hospital);
        
        JOptionPane.showMessageDialog(this, "Doctor created successfully");
        
        
        txtDoctorID.setText("");
        txtDoctorName.setText("");
        txtDoctorUsername.setText("");
        txtDoctorAge.setText("");
//        cbDoctorGender.setText("");
        txtDoctorRole.setText("");
        txtDoctorEmail.setText("");
        txtDoctorPhno.setText("");
        txtDoctorPassword.setText("");
        txtDoctorExperience.setText("");
        txtDoctorSpecialization.setText("");
        txtDoctorHospital.setText("");
        
        populateDoctorTable();
        populateCombo();
        
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnEncounterCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEncounterCreateActionPerformed
        // TODO add your handling code here:
        String encounterNumber = txtEncounterNo.getText();
        if(encounterNumber.isEmpty()){
            JOptionPane.showMessageDialog(this, "Enter the Id");
            return;
        }
        else if(system.getEncounterlist().uiqueEncounterId(encounterNumber)== false){
            JOptionPane.showMessageDialog(this, "Id already exist");
            return;
        }
        
        
        
        String hospital = txtEncounterHospital.getText();
//        if(hospital.isEmpty()){
//            JOptionPane.showMessageDialog(this, "Enter the hospital");
//            return;
//        }
        
        
        
        String doctorUserName = String.valueOf(cmbDoc1.getSelectedItem());
        
        
        
        String patientUsername = String.valueOf(txtEncounterPatientUsername.getSelectedItem());
        
        
        
        String date = txtEncounterDate.getText();
        if(!data.dateCheck(date)){
            JOptionPane.showMessageDialog(this, "Please enter correct date in format mm/dd/yyyy");
            return;
        }
        
        
//        String status = txtEncounterBP1.getText();
//        String ngo = String.valueOf(jComboBox1.getSelectedItem());
        String BP = txtEncounterBP.getText();
        if(BP.isEmpty()){
            JOptionPane.showMessageDialog(this, "Enter the BP");
            return;
        }
        
        
        String temperature = txtEncounterTemperature.getText();
        if(temperature.isEmpty()){
            JOptionPane.showMessageDialog(this, "Enter the temperature");
            return;
        }
        
        
        String medicine = txtEncounterMedicine.getText();
        if(medicine.isEmpty()){
            JOptionPane.showMessageDialog(this, "Enter the medicine");
            return;
        }
        
        
        String medicineQuantity = txtMedicineQuantity.getText();
        if(medicineQuantity.isEmpty()){
            JOptionPane.showMessageDialog(this, "Enter the medicine Quantity");
            return;
        }
        
        
        Encounter newEncounter = system.getEncounterlist().addHospitalEncounter();
        
        newEncounter.setEncounterNo(encounterNumber);
//        newEncounter.setHospital(hospital);
        newEncounter.setDoctorUserName(doctorUserName);
        newEncounter.setPatientUsername(patientUsername);
        newEncounter.setDate(date);
//        newEncounter.setStatus(status);
//        newEncounter.setNgo(ngo);
        newEncounter.setBP(BP);
        newEncounter.setTemperature(temperature);
        newEncounter.setMedicine(medicine);
        newEncounter.setMedicineQuantity(medicineQuantity);


        JOptionPane.showMessageDialog(this, "Encounter created successfully");
        
        
        txtEncounterNo.setText("");
//        txtEncounterHospital.setText("");
     
        txtEncounterDate.setText("");

        txtEncounterBP.setText("");
        txtEncounterTemperature.setText("");
        txtEncounterMedicine.setText("");
        txtMedicineQuantity.setText("");
        
        
        
        populateHospitalEncounterTable();
        
    }//GEN-LAST:event_btnEncounterCreateActionPerformed

    private void btnLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogOutActionPerformed
        // TODO add your handling code here:
        dB4OUtil.storeSystem(system);
        CardLayout cardLayout = (CardLayout) cardPanel.getLayout();
        cardPanel.remove(this);
        cardLayout.previous(cardPanel);
    }//GEN-LAST:event_btnLogOutActionPerformed

    private void txtDoctorRoleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDoctorRoleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDoctorRoleActionPerformed

    private void txtDoctorIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDoctorIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDoctorIDActionPerformed

    private void txtDoctorUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDoctorUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDoctorUsernameActionPerformed

    private void txtDoctorNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDoctorNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDoctorNameActionPerformed

    private void btnDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDoctorActionPerformed
        // TODO add your handling code here:
        panelWork.removeAll();
        panelWork.add(panelDoctor);
        panelWork.repaint();
        panelWork.revalidate();
    }//GEN-LAST:event_btnDoctorActionPerformed

    private void txtDoctorEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDoctorEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDoctorEmailActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        Integer selectedRowIndex = tableDoctor.getSelectedRow();
        
        if (selectedRowIndex<0){

            JOptionPane.showMessageDialog(this, "Please select a row to view.");
            return;
        }
        
        else{
            DefaultTableModel model = (DefaultTableModel) tableDoctor.getModel();
            Doctor doc = (Doctor) model.getValueAt(selectedRowIndex,0);
            
//            doc.setDoctorId(txtDoctorID.getText());
            
            
            
            doc.setName(txtDoctorName.getText());
            if(txtDoctorName.getText().isEmpty()){
		JOptionPane.showMessageDialog(this, "Enter valid name");
                return;
            }
            
            
//            doc.setUsername(txtDoctorUsername.getText());
            
            
            if(!data.numcheck(txtDoctorAge.getText())){
		JOptionPane.showMessageDialog(this, "Enter valid age");
                return;
            }
            doc.setAge(Integer.valueOf(txtDoctorAge.getText()));
            
            
            
            doc.setGender(String.valueOf(cbDoctorGender.getSelectedItem()));
            
            
            
            doc.setRole(txtDoctorRole.getText());
            
            
            
            doc.setEmailId(txtDoctorEmail.getText());
            if(!data.emailCheck(txtDoctorEmail.getText())){
		JOptionPane.showMessageDialog(this, "Enter valid emailid");
                return;
            }
            
            
            if(!data.phnocheck(txtDoctorPhno.getText())){
                JOptionPane.showMessageDialog(this, "Enter valid phone no");
                return;
            }
            doc.setPhno(Long.valueOf(txtDoctorPhno.getText()));
            
            
            
            doc.setPassword(txtDoctorPassword.getText());
            if(txtDoctorPassword.getText().isEmpty()){
		JOptionPane.showMessageDialog(this, "Enter valid password");
                return;
             }   
            
            
            if(!data.numcheck(txtDoctorExperience.getText())){
		JOptionPane.showMessageDialog(this, "Enter valid Experience");
                return;
            }
            doc.setExperience(Integer.valueOf(txtDoctorExperience.getText()));
            
            
            
            doc.setSpecialization(txtDoctorSpecialization.getText());
            if(txtDoctorSpecialization.getText().isEmpty()){
		JOptionPane.showMessageDialog(this, "Enter valid Doctor Specialization");
                return;
            }
            
            
            doc.setHospital(txtDoctorHospital.getText());
            if(txtDoctorHospital.getText().isEmpty()){
		JOptionPane.showMessageDialog(this, "Enter valid Hospital");
                return;
             }
            
            
            JOptionPane.showMessageDialog(this, "Doctor updated successfully");
            
            populateDoctorTable();
        }
        
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        Integer selectedRowIndex = tableDoctor.getSelectedRow();
        
        if (selectedRowIndex<0){

            JOptionPane.showMessageDialog(this, "Please select a row to view.");
            return;
        }
        
        else{
            DefaultTableModel model = (DefaultTableModel) tableDoctor.getModel();
            Doctor doc = (Doctor) model.getValueAt(selectedRowIndex,0);

            txtDoctorID.setText(doc.getDoctorId());
            txtDoctorName.setText(doc.getName());
            txtDoctorUsername.setText(doc.getUsername());
            txtDoctorAge.setText(String.valueOf(doc.getAge()));
            cbDoctorGender.setSelectedItem(doc.getGender());
            txtDoctorRole.setText(doc.getRole());
            txtDoctorEmail.setText(doc.getEmailId());
            txtDoctorPhno.setText(String.valueOf(doc.getPhno()));
            txtDoctorPassword.setText(doc.getPassword());
            
            txtDoctorHospital.setText(doc.getHospital());
            txtDoctorSpecialization.setText(doc.getSpecialization());
            txtDoctorExperience.setText(String.valueOf(doc.getExperience()));
        }
          
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        Integer selectedRowIndex = tableDoctor.getSelectedRow();

        if (selectedRowIndex<0){

            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
            return;
        }

        else{
            DefaultTableModel model = (DefaultTableModel) tableDoctor.getModel();
            Doctor doc = (Doctor) model.getValueAt(selectedRowIndex,0);

            system.getDoctorList().deleteDoctor(doc);
            
            JOptionPane.showMessageDialog(this, "Doctor deleted successfully.");

            //            dB4OUtil.storeSystem(system);
            populateDoctorTable();
        }
        
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnPatientDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPatientDeleteActionPerformed
        // TODO add your handling code here:
        Integer selectedRowIndex = tablePatient.getSelectedRow();

        if (selectedRowIndex<0){

            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
            return;
        }

        else{
            DefaultTableModel model = (DefaultTableModel) tablePatient.getModel();
            Patient pat = (Patient) model.getValueAt(selectedRowIndex,0);

            system.getPatientList().deletePatient(pat);

            JOptionPane.showMessageDialog(this, "Patient deleted successfully.");
            
            populatePatientTable();
        }
        
    }//GEN-LAST:event_btnPatientDeleteActionPerformed

    private void btnPatientUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPatientUpdateActionPerformed
        // TODO add your handling code here:
        
        Integer selectedRowIndex = tablePatient.getSelectedRow();

        if (selectedRowIndex<0){

            JOptionPane.showMessageDialog(this, "Please select a row to view.");
            return;
        }
        else{
            DefaultTableModel model = (DefaultTableModel) tablePatient.getModel();
            Patient pat = (Patient) model.getValueAt(selectedRowIndex,0);
            
            
            pat.setRole(txtPatientRole.getText());
            
            
//            pat.setPatientId(txtPatientID.getText());
            
            
            
            pat.setName(txtPatientName.getText());
            if(txtPatientName.getText().isEmpty()){
			JOptionPane.showMessageDialog(this, "Enter valid name");
            return;
        }
            
            
//            pat.setUsername(txtPatientUsername.getText());
            
            
            if(!data.numcheck(txtPatientAge.getText())){
		JOptionPane.showMessageDialog(this, "Enter valid age");
                return;
            }
            pat.setAge(Integer.valueOf(txtPatientAge.getText()));
            
            
            
            pat.setGender(String.valueOf(cbPatientGender.getSelectedItem()));
            

            
            
            pat.setEmailId(txtPatientEmail.getText());
            if(!data.emailCheck(txtPatientEmail.getText())){
		JOptionPane.showMessageDialog(this, "Enter valid emailid");
                return;
            }
            
            
            if(!data.phnocheck(txtPatientPhone.getText())){
		JOptionPane.showMessageDialog(this, "Enter valid phone no");
                return;
            }
            pat.setPhno(Long.valueOf(txtPatientPhone.getText()));
            
            
            
            pat.setPassword(txtPatientPassword.getText());
            if(txtPatientPassword.getText().isEmpty()){
                JOptionPane.showMessageDialog(this, "Enter valid password");
                return;
            }
            
            
            pat.setDocId(String.valueOf(cmdDoc.getSelectedItem()));
            
            
            
            JOptionPane.showMessageDialog(this, "Patient updated successfully");
            
            populatePatientTable();

        }        
        
    }//GEN-LAST:event_btnPatientUpdateActionPerformed

    private void btnPatientViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPatientViewActionPerformed
        // TODO add your handling code here:
        Integer selectedRowIndex = tablePatient.getSelectedRow();
        
        if (selectedRowIndex<0){

            JOptionPane.showMessageDialog(this, "Please select a row to view.");
            return;
        }
        else{
                DefaultTableModel model = (DefaultTableModel) tablePatient.getModel();
                Patient pat = (Patient) model.getValueAt(selectedRowIndex,0);  


                txtPatientID.setText(pat.getPatientId());
                txtPatientName.setText(pat.getName());
                txtPatientUsername.setText(pat.getUsername());
                txtPatientAge.setText(String.valueOf(pat.getAge()));
                cbPatientGender.setSelectedItem(pat.getGender());
                txtPatientRole.setText(pat.getRole());
                txtPatientEmail.setText(pat.getEmailId());
                txtPatientPhone.setText(String.valueOf(pat.getPhno()));
                txtPatientPassword.setText(pat.getPassword());
                cmdDoc.setSelectedItem(pat.getDocId());
            
        }

    }//GEN-LAST:event_btnPatientViewActionPerformed

    private void btnPatientCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPatientCreateActionPerformed
        // TODO add your handling code here:
        
        String role = txtPatientRole.getText();
        
        
        String id = txtPatientID.getText();
        if(id.isEmpty()){
            JOptionPane.showMessageDialog(this, "Enter the Id");
            return;
        }
        else if(system.getPatientList().uiquePatientId(id)== false){
            JOptionPane.showMessageDialog(this, "Id already exist");
            return;
        }
        
        
        
        String username = txtPatientUsername.getText();
        if(username.isEmpty()){
            JOptionPane.showMessageDialog(this, "Enter the username");
            return;
        }
        else if(system.getPatientList().uniquePatientUsername(username)==false){
            JOptionPane.showMessageDialog(this, "Username already exist");
            return;
        }
        
        
        String name = txtPatientName.getText();
        if(name.isEmpty()){
            JOptionPane.showMessageDialog(this, "Enter the name");
            return;
        }
        
        
        if(data.numcheck(txtPatientAge.getText())==false){
            JOptionPane.showMessageDialog(this, "Enter valid age");
            return;
        }
        Integer age = Integer.valueOf(txtPatientAge.getText());
        
        
        
        String gender = String.valueOf(cbPatientGender.getSelectedItem());
        

        
        String emailid= txtPatientEmail.getText();
        if(!data.emailCheck(emailid)){
            JOptionPane.showMessageDialog(this, "Enter valid email id");
            return;
        }
        
        if(!data.phnocheck(txtPatientPhone.getText())){
            JOptionPane.showMessageDialog(this, "Enter valid phone no");
            return;
        }
        Long phno = Long.valueOf(txtPatientPhone.getText());

        
        
        
        String pass = txtPatientPassword.getText();
        if(pass.isEmpty()){
            JOptionPane.showMessageDialog(this, "Enter valid password");
            return;
        }
        
        
        String doc = String.valueOf(cmdDoc.getSelectedItem());
        
        
        
        
        Patient newPatient = system.getPatientList().addPatient();
        
        newPatient.setPatientId(id);
        newPatient.setName(name);
        newPatient.setUsername(username);
        newPatient.setAge(age);
        newPatient.setGender(gender);
        newPatient.setRole(role);
        newPatient.setEmailId(emailid);
        newPatient.setPhno(phno);
        newPatient.setPassword(pass);
        newPatient.setDocId(doc);
        JOptionPane.showMessageDialog(this, "Patient created successfully");
        
        txtPatientID.setText("");
        txtPatientName.setText("");
        txtPatientUsername.setText("");
        txtPatientAge.setText("");
//      cbPatientGender
        txtPatientRole.setText("");
        txtPatientEmail.setText("");
        txtPatientPhone.setText("");
        txtPatientPassword.setText("");
       
        
        populateCombo();
        populatePatientTable();

    }//GEN-LAST:event_btnPatientCreateActionPerformed

    private void btnEncounterViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEncounterViewActionPerformed
        // TODO add your handling code here:
        Integer selectedRowIndex = tableEncounter.getSelectedRow();

        if (selectedRowIndex<0){

            JOptionPane.showMessageDialog(this, "Please select a row to view.");
            return;
        }
        else{
              
            DefaultTableModel model = (DefaultTableModel) tableEncounter.getModel();
            Encounter enc = (Encounter) model.getValueAt(selectedRowIndex,0);
            
            txtEncounterNo.setText(enc.getEncounterNo());
//            txtEncounterHospital.setText(enc.getHospital());
            cmbDoc1.setSelectedItem(enc.getDoctorUserName());
            txtEncounterPatientUsername.setSelectedItem(enc.getPatientUsername());
            txtEncounterDate.setText(enc.getDate());
            
            txtEncounterBP.setText(enc.getBP());
            txtEncounterTemperature.setText(enc.getTemperature());
            txtEncounterMedicine.setText(enc.getMedicine());
            txtMedicineQuantity.setText(enc.getMedicineQuantity());
            
        }
        
    }//GEN-LAST:event_btnEncounterViewActionPerformed

    private void btnEncounterDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEncounterDeleteActionPerformed
        // TODO add your handling code here:
        Integer selectedRowIndex = tableEncounter.getSelectedRow();
        
        if (selectedRowIndex<0){

            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
            return;
        }
        
        else{
            DefaultTableModel model = (DefaultTableModel) tableEncounter.getModel();
            Encounter enc = (Encounter) model.getValueAt(selectedRowIndex,0);

            system.getEncounterlist().deleteHospitalEncounter(enc);

            JOptionPane.showMessageDialog(this, "Encounter deleted successfully.");
            
            populateHospitalEncounterTable();
        }        
    }//GEN-LAST:event_btnEncounterDeleteActionPerformed

    private void btnEncounterUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEncounterUpdateActionPerformed
        // TODO add your handling code here:
                Integer selectedRowIndex = tableEncounter.getSelectedRow();

        if (selectedRowIndex<0){

            JOptionPane.showMessageDialog(this, "Please select a row to view.");
            return;
        }

        else{
            DefaultTableModel model = (DefaultTableModel) tableEncounter.getModel();
            Encounter enc = (Encounter) model.getValueAt(selectedRowIndex,0);
            
//            enc.setEncounterNo(txtEncounterNo.getText());
            
            
            
//            enc.setHospital(txtEncounterHospital.getText());
            
            
            
            enc.setDoctorUserName(String.valueOf(cmbDoc1.getSelectedItem()));
            
            
            enc.setPatientUsername(String.valueOf(txtEncounterPatientUsername.getSelectedItem()));
            
            
            
            enc.setDate(txtEncounterDate.getText());
            if(!data.dateCheck(txtEncounterDate.getText())){
                JOptionPane.showMessageDialog(this, "Enter valid date");
                return;
            }
            

            enc.setBP(txtEncounterBP.getText());
            if(txtEncounterBP.getText().isEmpty()){
		JOptionPane.showMessageDialog(this, "Enter valid BP");
                return;
            }
            
            
            enc.setTemperature(txtEncounterTemperature.getText());
            if(txtEncounterTemperature.getText().isEmpty()){
		JOptionPane.showMessageDialog(this, "Enter valid Temperature");
                return;
            }
            
            
            enc.setMedicine(txtEncounterMedicine.getText());
            if(txtEncounterMedicine.getText().isEmpty()){
		JOptionPane.showMessageDialog(this, "Enter valid Medicine");
                return;
            }
            
            
            enc.setMedicineQuantity(txtMedicineQuantity.getText());
            if(txtMedicineQuantity.getText().isEmpty()){
		JOptionPane.showMessageDialog(this, "Enter valid Medicine Quantity");
                return;
            }
            
            
            JOptionPane.showMessageDialog(this, "Encounter updated successfully");
            
            
            
            populateHospitalEncounterTable();
            
          
        }
    }//GEN-LAST:event_btnEncounterUpdateActionPerformed

    private void txtMedicineQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMedicineQuantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMedicineQuantityActionPerformed

    private void btnPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPatientActionPerformed
        // TODO add your handling code here:
        panelWork.removeAll();
        panelWork.add(panelPatient);
        panelWork.repaint();
        panelWork.revalidate();
    }//GEN-LAST:event_btnPatientActionPerformed

    private void AppointmentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AppointmentsActionPerformed
        // TODO add your handling code here:
        panelWork.removeAll();
        panelWork.add(panelAppointment  );
        panelWork.repaint();
        panelWork.revalidate();
    }//GEN-LAST:event_AppointmentsActionPerformed

    private void btnAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcceptActionPerformed
        // TODO add your handling code here:
//        System.out.println(system.getBudgetList());
     try{   
        Integer selectedRowIndex = tableAppointment.getSelectedRow();
        Integer ngofund = system.getBudgetList().getTotal();
//        Integer amt = ngofund.getTotal();
        
        
        if (selectedRowIndex<0){

            JOptionPane.showMessageDialog(this, "Please select a row to view.");
            return;
        }
        else if(system.getHosAppList().getHosAppList().get(selectedRowIndex).getStatus().equals("Rejected")){
            JOptionPane.showMessageDialog(this, "The application is Rejected and cannot be Accepted");
            return;
        }
        else if(ngofund<10){
            JOptionPane.showMessageDialog(this, "Cannot accept as Ngo does not have sufficient funds");
            return;
        }
        else{
            DefaultTableModel model = (DefaultTableModel) tableAppointment.getModel();
            Appointment selApp = (Appointment) model.getValueAt(selectedRowIndex,0);
            selApp.setStatus("Accepted");
            system.getBudgetList().getMoney().setTotal(ngofund-10);
            
            Integer total = system.getBudgetList().getMoney().getTotal();
            Integer others = system.getBudgetList().getMoney().getOthers();
            Integer don = system.getBudgetList().getMoney().getDonation();
            
            if(others>=10){
                system.getBudgetList().getMoney().setOthers(others - 10);
            }
            else{
                system.getBudgetList().getMoney().setDonation(don-10);
            }
            populateAppointmentTable();
        }
     }catch(NullPointerException ne){
         JOptionPane.showMessageDialog(this, ne.getMessage());
         return;
     }
     
    }//GEN-LAST:event_btnAcceptActionPerformed

    private void btnRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRejectActionPerformed
        // TODO add your handling code here:
        Integer selectedRowIndex = tableAppointment.getSelectedRow();

        if (selectedRowIndex<0){

            JOptionPane.showMessageDialog(this, "Please select a row to view.");
            return;
        }
        else if(system.getHosAppList().getHosAppList().get(selectedRowIndex).getStatus().equals("Accepted")){
            JOptionPane.showMessageDialog(this, "The application is Rejected and cannot be Accepted");
            return;
        }
        else{
            DefaultTableModel model = (DefaultTableModel) tableAppointment.getModel();
            Appointment selApp = (Appointment) model.getValueAt(selectedRowIndex,0);
            selApp.setStatus("Accepted");

            populateAppointmentTable();
        }
    }//GEN-LAST:event_btnRejectActionPerformed

    private void btnView1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnView1ActionPerformed
        // TODO add your handling code here:
        Integer selectedRowIndex = tableAppointment.getSelectedRow();

        if (selectedRowIndex<0){

            JOptionPane.showMessageDialog(this, "Please select a row to view.");
            return;
        }

        Appointment a = system.getHosAppList().getHosAppList().get(selectedRowIndex);
        if(a.getStatus().equals("Rejected") || a.getStatus().equals("Accepted") ){
            JOptionPane.showMessageDialog(this, "Only Pending status applications can be viewed");
        }

        else{
            DefaultTableModel model = (DefaultTableModel) tableAppointment.getModel();
            Appointment selApp = (Appointment) model.getValueAt(selectedRowIndex,0);

            txtApplicationNo.setText(selApp.getAppNo());
            txtChildName.setText(selApp.getPatient());
            txtChildAge.setText(String.valueOf(selApp.getAge()));
            txtAppDate.setText(selApp.getDate());
            cmbChildGender.setSelectedItem(selApp.getGender());
            
            
            
            txtChildComment.setText(selApp.getComment());
        }
    }//GEN-LAST:event_btnView1ActionPerformed

        private void populateDoctorTable(){
        DefaultTableModel model = (DefaultTableModel) tableDoctor.getModel();
        model.setRowCount(0);
        
//        
            for(Doctor c: system.getDoctorList().getDoctorList()){

                Object[] row = new Object[6];
                row[0] = c; 
                row[1] = c.getName();
                row[2] = c.getSpecialization();
                row[3] = c.getAge();
                row[4] = c.getGender();
                row[5] = c.getPhno();
                model.addRow(row);
            }
    }
    private void populatePatientTable(){
        DefaultTableModel model = (DefaultTableModel) tablePatient.getModel();
        model.setRowCount(0);
        
//        
//            for(Patient c: system.getDoctorList().getDoctorList()){
              for(Patient p: system.getPatientList().getPatientList()){
                  
                Object[] row = new Object[5];
                row[0] = p;
                row[1] = p.getName();
                row[2] = p.getAge();
                row[3] = p.getGender();
                row[4] = p.getPhno();
          
                model.addRow(row);
            }
    }
        
    private void populateHospitalEncounterTable(){
        DefaultTableModel model = (DefaultTableModel) tableEncounter.getModel();
        model.setRowCount(0);
        
            for(Encounter e: system.getEncounterlist().getHospitalEncounterList()){
                  
                Object[] row = new Object[6];
                row[0] = e;
                row[1] = e.getDoctorUserName();
                row[2] = e.getPatientUsername(); 
                row[3] = e.getBP();
                row[4] = e.getTemperature();
                row[5] = e.getStatus();

                model.addRow(row);
            }
    }    
     
    private void populateAppointmentTable(){
        DefaultTableModel model = (DefaultTableModel) tableAppointment.getModel();
        model.setRowCount(0);
        
            for(Appointment e: system.getHosAppList().getHosAppList()){
                  
                Object[] row = new Object[5];
                row[0] = e;
                row[1] = e.getPatient();
                row[2] = e.getGender(); 
                row[3] = e.getAge();
                row[4] = e.getStatus();

                model.addRow(row);
            }
    }    
        
        
     
    public void populateCombo(){
        
        String[] docArr1 = system.getDoctorList().docUsernameArray();
        DefaultComboBoxModel dn1 = new DefaultComboBoxModel(docArr1);
        cmdDoc.setModel(dn1);
        
        String[] docArr2 = system.getDoctorList().docUsernameArray();
        DefaultComboBoxModel dn2 = new DefaultComboBoxModel(docArr2);
        cmbDoc1.setModel(dn2);
        
        
        String[] docArr3 = system.getPatientList().patUsernameArray();
        DefaultComboBoxModel dn3 = new DefaultComboBoxModel(docArr3);
        txtEncounterPatientUsername.setModel(dn3);
    }
        

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Appointments;
    private javax.swing.JSplitPane SplitPaneDoctor;
    private javax.swing.JButton btnAccept;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDoctor;
    private javax.swing.JButton btnEncounter;
    private javax.swing.JButton btnEncounterCreate;
    private javax.swing.JButton btnEncounterDelete;
    private javax.swing.JButton btnEncounterUpdate;
    private javax.swing.JButton btnEncounterView;
    private javax.swing.JButton btnHome;
    private javax.swing.JButton btnLogOut;
    private javax.swing.JButton btnPatient;
    private javax.swing.JButton btnPatientCreate;
    private javax.swing.JButton btnPatientDelete;
    private javax.swing.JButton btnPatientUpdate;
    private javax.swing.JButton btnPatientView;
    private javax.swing.JButton btnReject;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnView;
    private javax.swing.JButton btnView1;
    private javax.swing.JComboBox<String> cbDoctorGender;
    private javax.swing.JComboBox<String> cbPatientGender;
    private javax.swing.JComboBox<String> cmbChildGender;
    private javax.swing.JComboBox<String> cmbDoc1;
    private javax.swing.JComboBox<String> cmdDoc;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextField jTextField37;
    private javax.swing.JLabel lblApplicationNo;
    private javax.swing.JLabel lblChildAge;
    private javax.swing.JLabel lblChildName;
    private javax.swing.JLabel lblChildName1;
    private javax.swing.JLabel lblChildName3;
    private javax.swing.JLabel lblChildName5;
    private javax.swing.JLabel lblDoctorAge;
    private javax.swing.JLabel lblDoctorEmail;
    private javax.swing.JLabel lblDoctorEncounterUsername;
    private javax.swing.JLabel lblDoctorExperience;
    private javax.swing.JLabel lblDoctorGender;
    private javax.swing.JLabel lblDoctorHospital;
    private javax.swing.JLabel lblDoctorID;
    private javax.swing.JLabel lblDoctorName;
    private javax.swing.JLabel lblDoctorPassword;
    private javax.swing.JLabel lblDoctorPhone;
    private javax.swing.JLabel lblDoctorRole;
    private javax.swing.JLabel lblDoctorSpecialization;
    private javax.swing.JLabel lblDoctorUsername;
    private javax.swing.JLabel lblEncounterBP;
    private javax.swing.JLabel lblEncounterDate;
    private javax.swing.JLabel lblEncounterHospital;
    private javax.swing.JLabel lblEncounterMedicine;
    private javax.swing.JLabel lblEncounterMedicineQuantity;
    private javax.swing.JLabel lblEncounterNo;
    private javax.swing.JLabel lblEncounterPatientUsername;
    private javax.swing.JLabel lblEncounterTemperature;
    private javax.swing.JLabel lblPatientAge;
    private javax.swing.JLabel lblPatientEmail;
    private javax.swing.JLabel lblPatientGender;
    private javax.swing.JLabel lblPatientID;
    private javax.swing.JLabel lblPatientName;
    private javax.swing.JLabel lblPatientPassword;
    private javax.swing.JLabel lblPatientPhone;
    private javax.swing.JLabel lblPatientRole;
    private javax.swing.JLabel lblPatientUsername;
    private javax.swing.JLabel lblPatientUsername1;
    private javax.swing.JLabel lblRole;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle7;
    private javax.swing.JLabel lblTitleDoctor;
    private javax.swing.JLabel lblTitleEncounter;
    private javax.swing.JLabel lblTitleHospital;
    private javax.swing.JLabel lblTitlePatient;
    private javax.swing.JPanel panelAppointment;
    private javax.swing.JPanel panelControl;
    private javax.swing.JPanel panelDoctor;
    private javax.swing.JPanel panelEncounter;
    private javax.swing.JPanel panelHome;
    private javax.swing.JPanel panelPatient;
    private javax.swing.JPanel panelWork;
    private javax.swing.JTable tableAppointment;
    private javax.swing.JTable tableDoctor;
    private javax.swing.JTable tableEncounter;
    private javax.swing.JTable tablePatient;
    private javax.swing.JTextField txtAppDate;
    private javax.swing.JTextField txtApplicationNo;
    private javax.swing.JTextField txtChildAge;
    private javax.swing.JTextArea txtChildComment;
    private javax.swing.JTextField txtChildName;
    private javax.swing.JTextField txtDoctorAge;
    private javax.swing.JTextField txtDoctorEmail;
    private javax.swing.JTextField txtDoctorExperience;
    private javax.swing.JTextField txtDoctorHospital;
    private javax.swing.JTextField txtDoctorID;
    private javax.swing.JTextField txtDoctorName;
    private javax.swing.JPasswordField txtDoctorPassword;
    private javax.swing.JTextField txtDoctorPhno;
    private javax.swing.JTextField txtDoctorRole;
    private javax.swing.JTextField txtDoctorSpecialization;
    private javax.swing.JTextField txtDoctorUsername;
    private javax.swing.JTextField txtEncounterBP;
    private javax.swing.JTextField txtEncounterDate;
    private javax.swing.JTextField txtEncounterHospital;
    private javax.swing.JTextField txtEncounterMedicine;
    private javax.swing.JTextField txtEncounterNo;
    private javax.swing.JComboBox<String> txtEncounterPatientUsername;
    private javax.swing.JTextField txtEncounterTemperature;
    private javax.swing.JTextField txtMedicineQuantity;
    private javax.swing.JTextField txtPatientAge;
    private javax.swing.JTextField txtPatientEmail;
    private javax.swing.JTextField txtPatientID;
    private javax.swing.JTextField txtPatientName;
    private javax.swing.JPasswordField txtPatientPassword;
    private javax.swing.JTextField txtPatientPhone;
    private javax.swing.JTextField txtPatientRole;
    private javax.swing.JTextField txtPatientUsername;
    private javax.swing.JTextField txtStatus;
    // End of variables declaration//GEN-END:variables
}
