/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Ui.Hospital;

import Hospital.Doctor.Doctor;
import Hospital.Encounter.Encounter;
import Hospital.Patient.Patient;
import Ngo.NgoManager.NgoManager;

import System.Directories.DataValidation;
import System.Directories.MainSystem;
import java.awt.CardLayout;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author SrushtiGhatage
 */
public class DoctorWorkspace extends javax.swing.JPanel {

    /**
     * Creates new form DoctorWorkspace
     */
    
    private JPanel cardPanel;
    private NgoManager ngoManager;
    private MainSystem system;
    private Doctor doc;
    private DB4OUtil dB4OUtil;
    private final String FILENAME = "ProjectDataBank.db4o";
    private DataValidation data;
    
    public DoctorWorkspace(Doctor doc, JPanel cardPanel,MainSystem system,DB4OUtil dB4OUtil) {
        initComponents();
        this.doc= doc;
        this.cardPanel = cardPanel;
        this.system = system;
        this.dB4OUtil = dB4OUtil;
        this.data = new DataValidation();
        
        txtPatDoc.setText(doc.getUsername());
        txtDocUsername.setText(doc.getUsername());
        populateHospitalEncounterTable();
        populatePatientTable();
        populateCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        panelControl = new javax.swing.JPanel();
        btnHome = new javax.swing.JButton();
        btnPatient = new javax.swing.JButton();
        btnEncounter = new javax.swing.JButton();
        panelWork = new javax.swing.JPanel();
        panelHome = new javax.swing.JPanel();
        lblRole = new javax.swing.JLabel();
        btnLogOut = new javax.swing.JButton();
        lblTitleHospital = new javax.swing.JLabel();
        panelPatient = new javax.swing.JPanel();
        lblTitlePatient = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablePatient = new javax.swing.JTable();
        btnPatientView = new javax.swing.JButton();
        btnPatientDelete = new javax.swing.JButton();
        lblPatientRole = new javax.swing.JLabel();
        txtPatientRole = new javax.swing.JTextField();
        lblPatientID = new javax.swing.JLabel();
        txtPatientID = new javax.swing.JTextField();
        lblPatientUsername = new javax.swing.JLabel();
        txtPatientUsername = new javax.swing.JTextField();
        lblPatientName = new javax.swing.JLabel();
        txtPatientName = new javax.swing.JTextField();
        lblPatientAge = new javax.swing.JLabel();
        txtPatientAge = new javax.swing.JTextField();
        lblPatientGender = new javax.swing.JLabel();
        cbPatientGender = new javax.swing.JComboBox<>();
        lblPatientEmail = new javax.swing.JLabel();
        txtPatientEmail = new javax.swing.JTextField();
        lblPatientPhone = new javax.swing.JLabel();
        txtPatientPhone = new javax.swing.JTextField();
        lblPatientPassword = new javax.swing.JLabel();
        txtPatientPassword = new javax.swing.JTextField();
        lblPatientUsername1 = new javax.swing.JLabel();
        txtPatDoc = new javax.swing.JTextField();
        btnPatientCreate = new javax.swing.JButton();
        btnPatientUpdate = new javax.swing.JButton();
        panelEncounter = new javax.swing.JPanel();
        lblTitleEncounter = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableEncounter = new javax.swing.JTable();
        btnEncounterView = new javax.swing.JButton();
        btnEncounterDelete = new javax.swing.JButton();
        lblEncounterNo = new javax.swing.JLabel();
        lblEncounterHospital = new javax.swing.JLabel();
        lblDoctorEncounterUsername = new javax.swing.JLabel();
        lblEncounterPatientUsername = new javax.swing.JLabel();
        lblEncounterDate = new javax.swing.JLabel();
        txtEncounterNo = new javax.swing.JTextField();
        txtEncounterHospital = new javax.swing.JTextField();
        txtEncounterDate = new javax.swing.JTextField();
        lblEncounterBP = new javax.swing.JLabel();
        txtEncounterBP = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();
        lblEncounterTemperature = new javax.swing.JLabel();
        txtEncounterTemperature = new javax.swing.JTextField();
        lblEncounterMedicine = new javax.swing.JLabel();
        txtEncounterMedicine = new javax.swing.JTextField();
        lblEncounterMedicineQuantity = new javax.swing.JLabel();
        txtMedicineQuantity = new javax.swing.JTextField();
        txtEncounterPatientUsername = new javax.swing.JComboBox<>();
        txtDocUsername = new javax.swing.JTextField();
        btnEncounterCreate = new javax.swing.JButton();
        btnEncounterUpdate = new javax.swing.JButton();

        panelControl.setBackground(new java.awt.Color(51, 51, 51));

        btnHome.setText("Home");
        btnHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHomeActionPerformed(evt);
            }
        });

        btnPatient.setText("Patient");
        btnPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPatientActionPerformed(evt);
            }
        });

        btnEncounter.setText("Encounter");
        btnEncounter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEncounterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelControlLayout = new javax.swing.GroupLayout(panelControl);
        panelControl.setLayout(panelControlLayout);
        panelControlLayout.setHorizontalGroup(
            panelControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelControlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelControlLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(panelControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnEncounter, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnPatient, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btnHome, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelControlLayout.setVerticalGroup(
            panelControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelControlLayout.createSequentialGroup()
                .addGap(159, 159, 159)
                .addComponent(btnHome)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnPatient)
                .addGap(18, 18, 18)
                .addComponent(btnEncounter)
                .addContainerGap(494, Short.MAX_VALUE))
        );

        jSplitPane1.setLeftComponent(panelControl);

        panelHome.setBackground(new java.awt.Color(255, 255, 255));
        panelHome.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblRole.setFont(new java.awt.Font("Rockwell", 1, 18)); // NOI18N
        lblRole.setText("Role:  Doctor");
        panelHome.add(lblRole, new org.netbeans.lib.awtextra.AbsoluteConstraints(1115, 84, 123, 27));

        btnLogOut.setText("Logout");
        btnLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogOutActionPerformed(evt);
            }
        });
        panelHome.add(btnLogOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(1115, 129, 123, -1));

        lblTitleHospital.setFont(new java.awt.Font("Rockwell", 1, 36)); // NOI18N
        lblTitleHospital.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitleHospital.setText("Hospital Management System");
        panelHome.add(lblTitleHospital, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 20, 834, -1));

        panelPatient.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblTitlePatient.setFont(new java.awt.Font("Rockwell", 1, 36)); // NOI18N
        lblTitlePatient.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitlePatient.setText("PATIENT");
        panelPatient.add(lblTitlePatient, new org.netbeans.lib.awtextra.AbsoluteConstraints(289, 0, 736, 58));

        tablePatient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Patient ID", "Patient Name", "Patient Age", "Patient Gender", "Patient Phone"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Long.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tablePatient);

        panelPatient.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 90, 750, 115));

        btnPatientView.setText("View");
        btnPatientView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPatientViewActionPerformed(evt);
            }
        });
        panelPatient.add(btnPatientView, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 106, -1, -1));

        btnPatientDelete.setText("Delete");
        btnPatientDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPatientDeleteActionPerformed(evt);
            }
        });
        panelPatient.add(btnPatientDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 182, -1, -1));

        lblPatientRole.setText("Role");
        panelPatient.add(lblPatientRole, new org.netbeans.lib.awtextra.AbsoluteConstraints(74, 240, -1, -1));

        txtPatientRole.setEditable(false);
        txtPatientRole.setText("Patient");
        panelPatient.add(txtPatientRole, new org.netbeans.lib.awtextra.AbsoluteConstraints(158, 237, 149, -1));

        lblPatientID.setText("Patient ID");
        panelPatient.add(lblPatientID, new org.netbeans.lib.awtextra.AbsoluteConstraints(74, 274, -1, -1));
        panelPatient.add(txtPatientID, new org.netbeans.lib.awtextra.AbsoluteConstraints(158, 271, 149, -1));

        lblPatientUsername.setText("Username");
        panelPatient.add(lblPatientUsername, new org.netbeans.lib.awtextra.AbsoluteConstraints(74, 308, -1, -1));
        panelPatient.add(txtPatientUsername, new org.netbeans.lib.awtextra.AbsoluteConstraints(158, 305, 149, -1));

        lblPatientName.setText("Name");
        panelPatient.add(lblPatientName, new org.netbeans.lib.awtextra.AbsoluteConstraints(74, 342, -1, -1));
        panelPatient.add(txtPatientName, new org.netbeans.lib.awtextra.AbsoluteConstraints(158, 339, 149, -1));

        lblPatientAge.setText("Age");
        panelPatient.add(lblPatientAge, new org.netbeans.lib.awtextra.AbsoluteConstraints(74, 376, -1, -1));
        panelPatient.add(txtPatientAge, new org.netbeans.lib.awtextra.AbsoluteConstraints(158, 373, 149, -1));

        lblPatientGender.setText("Gender");
        panelPatient.add(lblPatientGender, new org.netbeans.lib.awtextra.AbsoluteConstraints(74, 410, -1, -1));

        cbPatientGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Male", "Female", "Others" }));
        panelPatient.add(cbPatientGender, new org.netbeans.lib.awtextra.AbsoluteConstraints(158, 407, 149, -1));

        lblPatientEmail.setText("Email");
        panelPatient.add(lblPatientEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(74, 444, -1, -1));
        panelPatient.add(txtPatientEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(158, 441, 149, -1));

        lblPatientPhone.setText("Phone No");
        panelPatient.add(lblPatientPhone, new org.netbeans.lib.awtextra.AbsoluteConstraints(74, 475, -1, -1));
        panelPatient.add(txtPatientPhone, new org.netbeans.lib.awtextra.AbsoluteConstraints(158, 475, 149, -1));

        lblPatientPassword.setText("Password");
        panelPatient.add(lblPatientPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(74, 518, -1, -1));
        panelPatient.add(txtPatientPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(156, 515, 151, -1));

        lblPatientUsername1.setText("Doctor:");
        panelPatient.add(lblPatientUsername1, new org.netbeans.lib.awtextra.AbsoluteConstraints(74, 552, -1, -1));

        txtPatDoc.setEditable(false);
        panelPatient.add(txtPatDoc, new org.netbeans.lib.awtextra.AbsoluteConstraints(156, 549, 151, -1));

        btnPatientCreate.setText("Create");
        btnPatientCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPatientCreateActionPerformed(evt);
            }
        });
        panelPatient.add(btnPatientCreate, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 70, -1, -1));

        btnPatientUpdate.setText("Update");
        btnPatientUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPatientUpdateActionPerformed(evt);
            }
        });
        panelPatient.add(btnPatientUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 147, -1, -1));

        panelEncounter.setBackground(new java.awt.Color(255, 255, 255));
        panelEncounter.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblTitleEncounter.setFont(new java.awt.Font("Rockwell", 1, 36)); // NOI18N
        lblTitleEncounter.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitleEncounter.setText("HOSPITAL ADMIN: ENCOUNTER");
        panelEncounter.add(lblTitleEncounter, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 10, 704, 59));

        tableEncounter.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Encounter No", "Doctor UserName", "Patient Username", "BP", "Temperature"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tableEncounter);

        panelEncounter.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 123, 659, 111));

        btnEncounterView.setText("View");
        btnEncounterView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEncounterViewActionPerformed(evt);
            }
        });
        panelEncounter.add(btnEncounterView, new org.netbeans.lib.awtextra.AbsoluteConstraints(96, 258, -1, -1));

        btnEncounterDelete.setText("Delete");
        btnEncounterDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEncounterDeleteActionPerformed(evt);
            }
        });
        panelEncounter.add(btnEncounterDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(276, 258, -1, -1));

        lblEncounterNo.setText("Encounter No");
        panelEncounter.add(lblEncounterNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 308, 93, -1));

        lblEncounterHospital.setText("Hospital");
        panelEncounter.add(lblEncounterHospital, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 339, -1, -1));

        lblDoctorEncounterUsername.setText("Doctor Username");
        panelEncounter.add(lblDoctorEncounterUsername, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 376, -1, -1));

        lblEncounterPatientUsername.setText("Patient Username");
        panelEncounter.add(lblEncounterPatientUsername, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 410, 93, -1));

        lblEncounterDate.setText("Date");
        panelEncounter.add(lblEncounterDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 441, -1, -1));
        panelEncounter.add(txtEncounterNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(111, 305, 101, -1));

        txtEncounterHospital.setEditable(false);
        txtEncounterHospital.setText("Hospital");
        panelEncounter.add(txtEncounterHospital, new org.netbeans.lib.awtextra.AbsoluteConstraints(111, 339, -1, -1));
        panelEncounter.add(txtEncounterDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(111, 441, 200, -1));

        lblEncounterBP.setText("BP");
        panelEncounter.add(lblEncounterBP, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 484, -1, -1));
        panelEncounter.add(txtEncounterBP, new org.netbeans.lib.awtextra.AbsoluteConstraints(111, 481, 200, -1));

        jLabel9.setText("Search");
        panelEncounter.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(271, 86, -1, -1));
        panelEncounter.add(jTextField8, new org.netbeans.lib.awtextra.AbsoluteConstraints(375, 83, 229, -1));

        lblEncounterTemperature.setText("Temperature");
        panelEncounter.add(lblEncounterTemperature, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 524, -1, -1));
        panelEncounter.add(txtEncounterTemperature, new org.netbeans.lib.awtextra.AbsoluteConstraints(111, 521, 200, -1));

        lblEncounterMedicine.setText("Medicine");
        panelEncounter.add(lblEncounterMedicine, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 561, -1, -1));
        panelEncounter.add(txtEncounterMedicine, new org.netbeans.lib.awtextra.AbsoluteConstraints(111, 553, 200, -1));

        lblEncounterMedicineQuantity.setText("Medicine Quantity");
        panelEncounter.add(lblEncounterMedicineQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 590, -1, -1));

        txtMedicineQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMedicineQuantityActionPerformed(evt);
            }
        });
        panelEncounter.add(txtMedicineQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 590, 193, -1));

        panelEncounter.add(txtEncounterPatientUsername, new org.netbeans.lib.awtextra.AbsoluteConstraints(111, 407, -1, -1));

        txtDocUsername.setEditable(false);
        panelEncounter.add(txtDocUsername, new org.netbeans.lib.awtextra.AbsoluteConstraints(111, 373, 72, -1));

        btnEncounterCreate.setText("Create");
        btnEncounterCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEncounterCreateActionPerformed(evt);
            }
        });
        panelEncounter.add(btnEncounterCreate, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 258, -1, -1));

        btnEncounterUpdate.setText("Update");
        btnEncounterUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEncounterUpdateActionPerformed(evt);
            }
        });
        panelEncounter.add(btnEncounterUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(186, 258, -1, -1));

        javax.swing.GroupLayout panelWorkLayout = new javax.swing.GroupLayout(panelWork);
        panelWork.setLayout(panelWorkLayout);
        panelWorkLayout.setHorizontalGroup(
            panelWorkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1360, Short.MAX_VALUE)
            .addGroup(panelWorkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelWorkLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(panelHome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(panelWorkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelWorkLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(panelPatient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(panelWorkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(panelEncounter, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelWorkLayout.setVerticalGroup(
            panelWorkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 752, Short.MAX_VALUE)
            .addGroup(panelWorkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelWorkLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(panelHome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(panelWorkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelWorkLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(panelPatient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(panelWorkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelWorkLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(panelEncounter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        jSplitPane1.setRightComponent(panelWork);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHomeActionPerformed
        // TODO add your handling code here:
        panelWork.removeAll();
        panelWork.add(panelHome);
        panelWork.repaint();
        panelWork.revalidate();
    }//GEN-LAST:event_btnHomeActionPerformed

    private void btnPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPatientActionPerformed
        // TODO add your handling code here:
        panelWork.removeAll();
        panelWork.add(panelPatient);
        panelWork.repaint();
        panelWork.revalidate();
    }//GEN-LAST:event_btnPatientActionPerformed

    private void btnEncounterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEncounterActionPerformed
        // TODO add your handling code here:
        panelWork.removeAll();
        panelWork.add(panelEncounter);
        panelWork.repaint();
        panelWork.revalidate();
    }//GEN-LAST:event_btnEncounterActionPerformed

    private void btnLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogOutActionPerformed
        // TODO add your handling code here:
        dB4OUtil.storeSystem(system);
        CardLayout cardLayout = (CardLayout) cardPanel.getLayout();
        cardPanel.remove(this);
        cardLayout.previous(cardPanel);
    }//GEN-LAST:event_btnLogOutActionPerformed

    private void btnEncounterViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEncounterViewActionPerformed
        // TODO add your handling code here:
        Integer selectedRowIndex = tableEncounter.getSelectedRow();

        if (selectedRowIndex<0){

            JOptionPane.showMessageDialog(this, "Please select a row to view.");
            return;
        }
        else{

            DefaultTableModel model = (DefaultTableModel) tableEncounter.getModel();
            Encounter enc = (Encounter) model.getValueAt(selectedRowIndex,0);

            txtEncounterNo.setText(enc.getEncounterNo());
            txtEncounterHospital.setText(enc.getHospital());
//            cmbDoc.setSelectedItem(enc.getDoctorUserName());
            txtEncounterPatientUsername.setSelectedItem(enc.getPatientUsername());
            txtEncounterDate.setText(enc.getDate());

            txtEncounterBP.setText(enc.getBP());
            txtEncounterTemperature.setText(enc.getTemperature());
            txtEncounterMedicine.setText(enc.getMedicine());
            txtMedicineQuantity.setText(enc.getMedicineQuantity());

        }

    }//GEN-LAST:event_btnEncounterViewActionPerformed

    private void btnEncounterDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEncounterDeleteActionPerformed
        // TODO add your handling code here:
        Integer selectedRowIndex = tableEncounter.getSelectedRow();

        if (selectedRowIndex<0){

            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
            return;
        }

        else{
            DefaultTableModel model = (DefaultTableModel) tableEncounter.getModel();
            Encounter enc = (Encounter) model.getValueAt(selectedRowIndex,0);

            system.getEncounterlist().deleteHospitalEncounter(enc);

            JOptionPane.showMessageDialog(this, "Encounter deleted successfully.");

            populateHospitalEncounterTable();
        }
    }//GEN-LAST:event_btnEncounterDeleteActionPerformed

    private void txtMedicineQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMedicineQuantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMedicineQuantityActionPerformed

    private void btnPatientUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPatientUpdateActionPerformed
        // TODO add your handling code here:

        Integer selectedRowIndex = tablePatient.getSelectedRow();

        if (selectedRowIndex<0){

            JOptionPane.showMessageDialog(this, "Please select a row to view.");
            return;
        }
        else{
            DefaultTableModel model = (DefaultTableModel) tablePatient.getModel();
            Patient pat = (Patient) model.getValueAt(selectedRowIndex,0);

            pat.setRole(txtPatientRole.getText());

            //            pat.setPatientId(txtPatientID.getText());

            pat.setName(txtPatientName.getText());
            if(txtPatientName.getText().isEmpty()){
                JOptionPane.showMessageDialog(this, "Enter valid name");
                return;
            }

            //            pat.setUsername(txtPatientUsername.getText());

            if(!data.numcheck(txtPatientAge.getText())){
                JOptionPane.showMessageDialog(this, "Enter valid age");
                return;
            }
            pat.setAge(Integer.valueOf(txtPatientAge.getText()));

            pat.setGender(String.valueOf(cbPatientGender.getSelectedItem()));

            pat.setEmailId(txtPatientEmail.getText());
            if(!data.emailCheck(txtPatientEmail.getText())){
                JOptionPane.showMessageDialog(this, "Enter valid emailid");
                return;
            }

            if(!data.phnocheck(txtPatientPhone.getText())){
                JOptionPane.showMessageDialog(this, "Enter valid phone no");
                return;
            }
            pat.setPhno(Long.valueOf(txtPatientPhone.getText()));

            pat.setPassword(txtPatientPassword.getText());
            if(txtPatientPassword.getText().isEmpty()){
                JOptionPane.showMessageDialog(this, "Enter valid password");
                return;
            }

//            pat.setDocId(txtPatDoc);

            JOptionPane.showMessageDialog(this, "Patient updated successfully");

            populatePatientTable();

        }
    }//GEN-LAST:event_btnPatientUpdateActionPerformed

    private void btnPatientCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPatientCreateActionPerformed
        // TODO add your handling code here:

        String role = txtPatientRole.getText();

        String id = txtPatientID.getText();
        if(id.isEmpty()){
            JOptionPane.showMessageDialog(this, "Enter the Id");
            return;
        }
        else if(system.getPatientList().uiquePatientId(id)== false){
            JOptionPane.showMessageDialog(this, "Id already exist");
            return;
        }

        String username = txtPatientUsername.getText();
        if(username.isEmpty()){
            JOptionPane.showMessageDialog(this, "Enter the username");
            return;
        }
        else if(system.getPatientList().uniquePatientUsername(username)==false){
            JOptionPane.showMessageDialog(this, "Username already exist");
            return;
        }

        String name = txtPatientName.getText();
        if(name.isEmpty()){
            JOptionPane.showMessageDialog(this, "Enter the name");
            return;
        }

        if(data.numcheck(txtPatientAge.getText())==false){
            JOptionPane.showMessageDialog(this, "Enter valid age");
            return;
        }
        Integer age = Integer.valueOf(txtPatientAge.getText());

        String gender = String.valueOf(cbPatientGender.getSelectedItem());

        String emailid= txtPatientEmail.getText();
        if(!data.emailCheck(emailid)){
            JOptionPane.showMessageDialog(this, "Enter valid email id");
            return;
        }

        if(!data.phnocheck(txtPatientPhone.getText())){
            JOptionPane.showMessageDialog(this, "Enter valid phone no");
            return;
        }
        Long phno = Long.valueOf(txtPatientPhone.getText());

        String pass = txtPatientPassword.getText();
        if(pass.isEmpty()){
            JOptionPane.showMessageDialog(this, "Enter valid password");
            return;
        }

//        String doc = txtPatDoc.getText();

        Patient newPatient = system.getPatientList().addPatient();

        newPatient.setPatientId(id);
        newPatient.setName(name);
        newPatient.setUsername(username);
        newPatient.setAge(age);
        newPatient.setGender(gender);
        newPatient.setRole(role);
        newPatient.setEmailId(emailid);
        newPatient.setPhno(phno);
        newPatient.setPassword(pass);
//        newPatient.setDocId(doc);
        JOptionPane.showMessageDialog(this, "Patient created successfully");

        txtPatientID.setText("");
        txtPatientName.setText("");
        txtPatientUsername.setText("");
        txtPatientAge.setText("");
        //      cbPatientGender
        txtPatientRole.setText("");
        txtPatientEmail.setText("");
        txtPatientPhone.setText("");
        txtPatientPassword.setText("");

        populateCombo();
        populatePatientTable();
    }//GEN-LAST:event_btnPatientCreateActionPerformed

    private void btnPatientDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPatientDeleteActionPerformed
        // TODO add your handling code here:
        Integer selectedRowIndex = tablePatient.getSelectedRow();

        if (selectedRowIndex<0){

            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
            return;
        }

        else{
            DefaultTableModel model = (DefaultTableModel) tablePatient.getModel();
            Patient pat = (Patient) model.getValueAt(selectedRowIndex,0);

            system.getPatientList().deletePatient(pat);

            JOptionPane.showMessageDialog(this, "Patient deleted successfully.");

            populatePatientTable();
        }
    }//GEN-LAST:event_btnPatientDeleteActionPerformed

    private void btnPatientViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPatientViewActionPerformed
        // TODO add your handling code here:
        Integer selectedRowIndex = tablePatient.getSelectedRow();

        if (selectedRowIndex<0){

            JOptionPane.showMessageDialog(this, "Please select a row to view.");
            return;
        }
        else{
            DefaultTableModel model = (DefaultTableModel) tablePatient.getModel();
            Patient pat = (Patient) model.getValueAt(selectedRowIndex,0);

            txtPatientID.setText(pat.getPatientId());
            txtPatientName.setText(pat.getName());
            txtPatientUsername.setText(pat.getUsername());
            txtPatientAge.setText(String.valueOf(pat.getAge()));
            cbPatientGender.setSelectedItem(pat.getGender());
            txtPatientRole.setText(pat.getRole());
            txtPatientEmail.setText(pat.getEmailId());
            txtPatientPhone.setText(String.valueOf(pat.getPhno()));
            txtPatientPassword.setText(pat.getPassword());
            txtPatDoc.setText(pat.getDocId());

        }
    }//GEN-LAST:event_btnPatientViewActionPerformed

    private void btnEncounterCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEncounterCreateActionPerformed
        // TODO add your handling code here:
        String encounterNumber = txtEncounterNo.getText();
        if(encounterNumber.isEmpty()){
            JOptionPane.showMessageDialog(this, "Enter the Id");
            return;
        }
        else if(system.getEncounterlist().uiqueEncounterId(encounterNumber)== false){
            JOptionPane.showMessageDialog(this, "Id already exist");
            return;
        }

        String hospital = txtEncounterHospital.getText();
        //        if(hospital.isEmpty()){
            //            JOptionPane.showMessageDialog(this, "Enter the hospital");
            //            return;
            //        }

        String doctorUserName = txtDocUsername.getText();

        String patientUsername = String.valueOf(txtEncounterPatientUsername.getSelectedItem());

        String date = txtEncounterDate.getText();
        if(!data.dateCheck(date)){
            JOptionPane.showMessageDialog(this, "Please enter correct date in format mm/dd/yyyy");
            return;
        }

        //        String status = txtEncounterBP1.getText();
        //        String ngo = String.valueOf(jComboBox1.getSelectedItem());
        String BP = txtEncounterBP.getText();
        if(BP.isEmpty()){
            JOptionPane.showMessageDialog(this, "Enter the BP");
            return;
        }

        String temperature = txtEncounterTemperature.getText();
        if(temperature.isEmpty()){
            JOptionPane.showMessageDialog(this, "Enter the temperature");
            return;
        }

        String medicine = txtEncounterMedicine.getText();
        if(medicine.isEmpty()){
            JOptionPane.showMessageDialog(this, "Enter the medicine");
            return;
        }

        String medicineQuantity = txtMedicineQuantity.getText();
        if(medicineQuantity.isEmpty()){
            JOptionPane.showMessageDialog(this, "Enter the medicine Quantity");
            return;
        }

        Encounter newEncounter = system.getEncounterlist().addHospitalEncounter();

        newEncounter.setEncounterNo(encounterNumber);
        //        newEncounter.setHospital(hospital);
        newEncounter.setDoctorUserName(doctorUserName);
        newEncounter.setPatientUsername(patientUsername);
        newEncounter.setDate(date);
        //        newEncounter.setStatus(status);
        //        newEncounter.setNgo(ngo);
        newEncounter.setBP(BP);
        newEncounter.setTemperature(temperature);
        newEncounter.setMedicine(medicine);
        newEncounter.setMedicineQuantity(medicineQuantity);

        JOptionPane.showMessageDialog(this, "Encounter created successfully");

        txtEncounterNo.setText("");
        //        txtEncounterHospital.setText("");

        txtEncounterDate.setText("");

        txtEncounterBP.setText("");
        txtEncounterTemperature.setText("");
        txtEncounterMedicine.setText("");
        txtMedicineQuantity.setText("");

        populateHospitalEncounterTable();

    }//GEN-LAST:event_btnEncounterCreateActionPerformed

    private void btnEncounterUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEncounterUpdateActionPerformed
        // TODO add your handling code here:
        Integer selectedRowIndex = tableEncounter.getSelectedRow();

        if (selectedRowIndex<0){

            JOptionPane.showMessageDialog(this, "Please select a row to view.");
            return;
        }

        else{
            DefaultTableModel model = (DefaultTableModel) tableEncounter.getModel();
            Encounter enc = (Encounter) model.getValueAt(selectedRowIndex,0);

            //            enc.setEncounterNo(txtEncounterNo.getText());

            //            enc.setHospital(txtEncounterHospital.getText());

//            enc.setDoctorUserName(String.valueOf(cmbDoc1.getSelectedItem()));

            enc.setPatientUsername(String.valueOf(txtEncounterPatientUsername.getSelectedItem()));

            enc.setDate(txtEncounterDate.getText());
            if(!data.dateCheck(txtEncounterDate.getText())){
                JOptionPane.showMessageDialog(this, "Enter valid date");
                return;
            }

            enc.setBP(txtEncounterBP.getText());
            if(txtEncounterBP.getText().isEmpty()){
                JOptionPane.showMessageDialog(this, "Enter valid BP");
                return;
            }

            enc.setTemperature(txtEncounterTemperature.getText());
            if(txtEncounterTemperature.getText().isEmpty()){
                JOptionPane.showMessageDialog(this, "Enter valid Temperature");
                return;
            }

            enc.setMedicine(txtEncounterMedicine.getText());
            if(txtEncounterMedicine.getText().isEmpty()){
                JOptionPane.showMessageDialog(this, "Enter valid Medicine");
                return;
            }

            enc.setMedicineQuantity(txtMedicineQuantity.getText());
            if(txtMedicineQuantity.getText().isEmpty()){
                JOptionPane.showMessageDialog(this, "Enter valid Medicine Quantity");
                return;
            }

            JOptionPane.showMessageDialog(this, "Encounter updated successfully");

            populateHospitalEncounterTable();

        }
    }//GEN-LAST:event_btnEncounterUpdateActionPerformed

    private void populatePatientTable(){
        DefaultTableModel model = (DefaultTableModel) tablePatient.getModel();
        model.setRowCount(0);
        
//        
//            for(Patient c: system.getDoctorList().getDoctorList()){
              for(Patient p: system.getPatientList().getPatientList()){
                  if (p.getDocId().equals(doc.getDoctorId())){
                    Object[] row = new Object[5];
                    row[0] = p;
                    row[1] = p.getName();
                    row[2] = p.getAge();
                    row[3] = p.getGender();
                    row[4] = p.getPhno();

                    model.addRow(row);
            }
                  
              }
            
    }
        
    private void populateHospitalEncounterTable(){
        DefaultTableModel model = (DefaultTableModel) tableEncounter.getModel();
        model.setRowCount(0);
        
            for(Encounter e: system.getEncounterlist().getHospitalEncounterList()){
                if (e.getDoctorUserName().equals(doc.getUsername())){  
                    Object[] row = new Object[6];
                    row[0] = e;
                    row[1] = e.getDoctorUserName();
                    row[2] = e.getPatientUsername(); 
                    row[3] = e.getBP();
                    row[4] = e.getTemperature();
                    row[5] = e.getStatus();

                    model.addRow(row);
                }
            }
                
    }    
     
    public void populateCombo(){
        
//        String[] docArr1 = system.getDoctorList().docUsernameArray();
//        DefaultComboBoxModel dn1 = new DefaultComboBoxModel(docArr1);
//        cmdDoc.setModel(dn1);
        
//        String[] docArr2 = system.getDoctorList().docUsernameArray();
//        DefaultComboBoxModel dn2 = new DefaultComboBoxModel(docArr2);
//        cmbDoc1.setModel(dn2);
        
        
        String[] docArr3 = system.getPatientList().patUsernameArray();
        DefaultComboBoxModel dn3 = new DefaultComboBoxModel(docArr3);
        txtEncounterPatientUsername.setModel(dn3);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEncounter;
    private javax.swing.JButton btnEncounterCreate;
    private javax.swing.JButton btnEncounterDelete;
    private javax.swing.JButton btnEncounterUpdate;
    private javax.swing.JButton btnEncounterView;
    private javax.swing.JButton btnHome;
    private javax.swing.JButton btnLogOut;
    private javax.swing.JButton btnPatient;
    private javax.swing.JButton btnPatientCreate;
    private javax.swing.JButton btnPatientDelete;
    private javax.swing.JButton btnPatientUpdate;
    private javax.swing.JButton btnPatientView;
    private javax.swing.JComboBox<String> cbPatientGender;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JLabel lblDoctorEncounterUsername;
    private javax.swing.JLabel lblEncounterBP;
    private javax.swing.JLabel lblEncounterDate;
    private javax.swing.JLabel lblEncounterHospital;
    private javax.swing.JLabel lblEncounterMedicine;
    private javax.swing.JLabel lblEncounterMedicineQuantity;
    private javax.swing.JLabel lblEncounterNo;
    private javax.swing.JLabel lblEncounterPatientUsername;
    private javax.swing.JLabel lblEncounterTemperature;
    private javax.swing.JLabel lblPatientAge;
    private javax.swing.JLabel lblPatientEmail;
    private javax.swing.JLabel lblPatientGender;
    private javax.swing.JLabel lblPatientID;
    private javax.swing.JLabel lblPatientName;
    private javax.swing.JLabel lblPatientPassword;
    private javax.swing.JLabel lblPatientPhone;
    private javax.swing.JLabel lblPatientRole;
    private javax.swing.JLabel lblPatientUsername;
    private javax.swing.JLabel lblPatientUsername1;
    private javax.swing.JLabel lblRole;
    private javax.swing.JLabel lblTitleEncounter;
    private javax.swing.JLabel lblTitleHospital;
    private javax.swing.JLabel lblTitlePatient;
    private javax.swing.JPanel panelControl;
    private javax.swing.JPanel panelEncounter;
    private javax.swing.JPanel panelHome;
    private javax.swing.JPanel panelPatient;
    private javax.swing.JPanel panelWork;
    private javax.swing.JTable tableEncounter;
    private javax.swing.JTable tablePatient;
    private javax.swing.JTextField txtDocUsername;
    private javax.swing.JTextField txtEncounterBP;
    private javax.swing.JTextField txtEncounterDate;
    private javax.swing.JTextField txtEncounterHospital;
    private javax.swing.JTextField txtEncounterMedicine;
    private javax.swing.JTextField txtEncounterNo;
    private javax.swing.JComboBox<String> txtEncounterPatientUsername;
    private javax.swing.JTextField txtEncounterTemperature;
    private javax.swing.JTextField txtMedicineQuantity;
    private javax.swing.JTextField txtPatDoc;
    private javax.swing.JTextField txtPatientAge;
    private javax.swing.JTextField txtPatientEmail;
    private javax.swing.JTextField txtPatientID;
    private javax.swing.JTextField txtPatientName;
    private javax.swing.JTextField txtPatientPassword;
    private javax.swing.JTextField txtPatientPhone;
    private javax.swing.JTextField txtPatientRole;
    private javax.swing.JTextField txtPatientUsername;
    // End of variables declaration//GEN-END:variables
}
